<?php
require_once "../../config/settings.inc.php";
require_once "../../include/database.inc.php";
require_once "../../include/myview.php";
require_once "../../include/forms.php";
require_once "../../include/mlib.php";

$mesosite = iemdb('mesosite');
$t = new MyView();
$t->current_network = "RWIS Surface";
$network = isset($_GET['network']) ? xssafe($_GET['network']) : 'IA_RWIS';
$sortcol = isset($_GET['sortcol']) ? xssafe($_GET['sortcol']) : 'ts';
 $t->title = "RWIS Surface Currents";
 $t->refresh = 600;
 $t->thispage = "current-sort";

$vals = Array("tsf0" => "Sensor 1 - Temp [F]", 
  "tmpf" => "Air Temp [F]",
  "dwpf" => "Dew Point [F]",
  "tsf1" => "Sensor 2 - Temp [F]",
  "tsf2" => "Sensor 3 - Temp [F]",
  "tsf3" => "Sensor 4 - Temp [F]",
  "pave_avg" => "Ave Surf Temp",
  "dry0" => "Sensor 1 - Cond [F]",
  "dry1" => "Sensor 2 - Cond [F]",
  "dry2" => "Sensor 3 - Cond [F]",
  "dry3" => "Sensor 4 - Cond [F]",
  "ts" => "Observation Time",
  "sname" => "Site Name",
  "rwis_subf" => "Sub-Surface Temperature"
);

$t->breadcrumbs = <<<EOF
<ol class="breadcrumb">
 <li><a href="/RWIS/">RWIS</a></li>
 <li class="active">Current Conditions</li>
</ol>
EOF;
$nselect = "<select name=\"network\">";
$rs = pg_query($mesosite, "SELECT id, name from networks where id ~* 'RWIS' ORDER by name ASC");
for ($i=0;$row=@pg_fetch_assoc($rs,$i);$i++){
	$sel = '';
	if ($network == $row["id"]){
		$sel = " selected='SELECTED'";
	}
	$nselect .= sprintf("<option value='%s'%s>%s</option>\n",
	  $row["id"], $sel, $row["name"]);
}
$nselect .= "</select>";


$mydata = Array();

$jdata = file_get_contents("http://iem.local/api/1/currents.json?network=${network}");
$jobj = json_decode($jdata, $assoc=TRUE);

while (list($bogus, $ob) = each($jobj["data"])){
    $key = $ob["station"];
	$mydata[$key] = $ob;
	$mydata[$key]["ts"] = strtotime($ob["local_valid"]);

	if ($mydata[$key]['tmpf'] < -60){
		$mydata[$key]['tmpf'] = "M";
		$mydata[$key]['dwpf'] = "M";
	}

	$t2 = Array($mydata[$key]['tsf0'], $mydata[$key]['tsf1'],
			    $mydata[$key]['tsf2'], $mydata[$key]['tsf3']);
	arsort($t2);

	while (min($t2) == -99){
		$ba = array_pop($t2);
		if (sizeof($t2) == 0) break;
	}

	asort($t2);
	if (sizeof($t2) > 0){
		while ((max($t2) - min($t2)) > 20){ $ba = array_pop($t2); }
		$mydata[$key]['pave_avg'] = array_sum($t2) / sizeof($t2);
	} else {
		$mydata[$key]['pave_avg'] = -99.99;
	}
}

$table = "";
$finalA = Array();
$finalA = aSortBySecondIndex($mydata, $sortcol);
$i = 0;
$now = time();
while (list ($key, $val) = each ($finalA))  {
	$parts = $finalA[$key];
	$i++;
	$tdiff = $now - $parts["ts"];
	/*    if ($tdiff > 86400*5){
	 continue;
	}
	*/
	$table .= "<tr";
	if ($i % 2 == 0)  $table .= " bgcolor='#eeeeee'";

	$table .= ">";
	$table .= "<td><input type=\"checkbox\" name=\"st[]\"
            value=\"".$key."_SF\"></td>";
	$table .= "<td>". $parts["name"] . "</td>";
	$table .= "<td";
	if ($tdiff > 11900){
		$table .= ' bgcolor="red">'. strftime("%b-%d-%y %I:%M %p", $parts["ts"]) .'</td>';
	} else if ($tdiff > 7200){
		$table .= ' bgcolor="orange">'. strftime("%b-%d %I:%M %p", $parts["ts"]) .'</td>';
	} else if ($tdiff > 3600){
		$table .= ' bgcolor="green">'. strftime("%I:%M %p", $parts["ts"]) .'</td>';
	} else {
		$table .= '>'. strftime("%I:%M %p", $parts["ts"]) .'</td>';
	}
	if ($parts["tsf0"] < -90) $tmpf0 = "M";
	else $tmpf0 = round($parts["tsf0"], 1);
	if ($parts["tsf1"] < -90) $tmpf1 = "M";
	else $tmpf1 = round($parts["tsf1"], 1);
	if ($parts["tsf2"] < -90) $tmpf2 = "M";
	else $tmpf2 = round($parts["tsf2"], 1);
	if ($parts["tsf3"] < -90) $tmpf3 = "M";
	else $tmpf3 = round($parts["tsf3"], 1);
	if ($parts["rwis_subf"] < -90) $subt = "M";
	else $subt = round($parts["rwis_subf"], 1);
	if ($parts["pave_avg"] < -90) $pave_avg = "M";
	else $pave_avg = round($parts["pave_avg"], 1);

	$table .= "<td>". $parts["tmpf"] ."</td>
	    <td>". $parts["dwpf"] ."</td>
	    <td>". $tmpf0 ."</td>
	    <td>". $tmpf1 ."</td>
	    <td>". $tmpf2 ."</td>
	    <td>". $tmpf3 ."</td>
            <td>". $subt ."</td>
            <td>". $pave_avg ."</td>
	    </tr>\n";
}

$content = <<<EOF
<form method="GET" action="currentSF.phtml">
{$nselect}
<input type="submit" value="Show State">
</form><p>


<h3 class="subtitle"><center>Current RWIS Surface Conditions</center></h3>

<p>** This page will automatically refresh every 10 minutes.
<br>Click on a column to sort it.</p>

<p>Sorted by: <b>{$vals[$sortcol]}</b><br>


<form method="GET" action="/my/current.phtml">
<table class="table table-striped table-bordered table-condensed">
<thead>
<tr>
  <th rowspan="2">ADD:</th>
  <th rowspan="2"><a href="currentSF.phtml?network={$network}&sortcol=sname">Station:</a></th>
  <th rowspan="2"><a href="currentSF.phtml?network={$network}&sortcol=ts">Ob Time</a></th>
  <th colspan="2">Air:</th>
  <th>Sensor 1</th>
  <th>Sensor 2</th>
  <th>Sensor 3</th>
  <th>Sensor 4</th>
  <th>&nbsp;</th>
  <th>&nbsp;</th>
<tr>
  
  <th><a href="currentSF.phtml?network={$network}&sortcol=tmpf">Temp</a></th>
  <th><a href="currentSF.phtml?network={$network}&sortcol=dwpf">Dew P</a></th>
  <th><a href="currentSF.phtml?network={$network}&sortcol=tsf0">Temp</a></th>
  <th><a href="currentSF.phtml?network={$network}&sortcol=tsf1">Temp</a></th>
  <th><a href="currentSF.phtml?network={$network}&sortcol=tsf2">Temp</a></th>
  <th><a href="currentSF.phtml?network={$network}&sortcol=tsf3">Temp</a></th>
  <th><a href="currentSF.phtml?network={$network}&sortcol=rwis_subf">Sub T</a></th>
  <th><a href="currentSF.phtml?network={$network}&sortcol=pave_avg">Ave Surface Temp</a> [<b>1</b>]</th>
</tr></thead>
<tbody>
{$table}
</tbody>
</table>
<input type="submit" value="Add to Favorites">
<input type="reset" value="Reset">

</form>


<br><br>

<b>Notes:</b><br>
<b>1</b>  The average surface temperature is calculated by the IEM using some
logic to account for sites without 4 sensors or broken sensors.


<br><br>
EOF;
$t->content = $content;
$t->render('sortables.phtml');
?>
