name: Install and Test
on: [push]
jobs:
  build-linux:
    name: Python (${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8"]
    steps:
    - uses: actions/checkout@v2

    - name: Add /etc/hosts entries
      run: |
        cat .github/workflows/etchosts.txt | sudo tee -a /etc/hosts

    - name: Setup CI from ci-tooling
      run: |
        git clone --depth 1 https://github.com/akrherz/iem-database.git database
        git clone --depth 1 https://github.com/akrherz/ci_tooling.git .ci_tooling
        git clone --depth 1 https://github.com/akrherz/iem-production-checks.git .ipc
        . .ci_tooling/postgres.sh
        sudo mkdir -p /mesonet/www/logs
        sudo ln -s `pwd` /opt/iem
        sudo ln -s $HOME/miniconda /opt/miniconda3
        echo `pwd`
        chmod 755 $HOME
        sudo apt-get install librrd-dev
        # need apache2-dev for mod-wsgi to build
        sudo apt-get install apache2 apache2-dev memcached
        sudo service memcached start
        sudo a2enmod headers rewrite proxy cgi expires authz_groupfile
        # we do things the old fashioned way, we earn it
        sudo a2dissite 000-default.conf
        # reduce resource usage of mod-wsgi processes
        sed -i -E "s/ processes=([0-9]+) / processes=8 /" deployment/apache_configs/mod_wsgi.conf
        sudo cp deployment/apache_configs/mod_wsgi.conf /etc/apache2/sites-enabled/
        echo '<VirtualHost *:80>' | sudo tee /etc/apache2/sites-enabled/iem.conf > /dev/null
        cat config/mesonet.inc | sudo tee -a /etc/apache2/sites-enabled/iem.conf > /dev/null
        echo '</VirtualHost>' | sudo tee -a /etc/apache2/sites-enabled/iem.conf > /dev/null
        # This may be a requirement for mod-wsgi to properly find python tooling?
        echo "export PATH=/home/travis/miniconda/envs/prod/bin:$PATH" | sudo tee -a /etc/apache2/envvars > /dev/null
        # Newer PROJ needs this
        echo "export PROJ_LIB=/home/travis/miniconda/envs/prod/share/proj" | sudo tee -a /etc/apache2/envvars > /dev/null
        . .ci_tooling/miniconda.sh
        # https://travis-ci.community/t/t/712/12
        export PATH="/usr/lib/postgresql/11/bin:$PATH"
        psql -c 'CREATE ROLE travis SUPERUSER LOGIN CREATEDB;' -U postgres || true
        cd database; sh bootstrap.sh
        python schema_manager.py
        cd ..
        MOD_WSGI_SO=$(find $HOME/miniconda/envs/prod -type f -name 'mod_wsgi*.so')
        echo $MOD_WSGI_SO
        echo "LoadModule wsgi_module $MOD_WSGI_SO" | sudo tee -a /etc/apache2/mods-enabled/wsgi.load > /dev/null;
        echo "WSGIApplicationGroup %{GLOBAL}" | sudo tee -a /etc/apache2/mods-enabled/wsgi.load > /dev/null;
        # restart apache
        sudo service apache2 stop
        sudo service apache2 start
        which python
        python /opt/iem/deployment/mod_wsgi_startup.py
        sudo cat /var/log/apache2/error.log
        sudo systemctl status apache2.service -l
        # Run autoplot tests with basically no data in database
        SERVICE=http://iem.local pytest -n 8 -x .ipc/tests/test_autoplot.py
        sudo cat /var/log/apache2/error.log
        # Add some test data to the database
        python database/store_test_data.py
        python scripts/dbutil/sync_stations.py
        # Run autoplot testing a second time
        SERVICE=http://iem.local pytest -n 8 -x .ipc/tests/test_autoplot.py
        sudo cat /var/log/apache2/error.log
